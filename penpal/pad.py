from hashlib import sha3_256
from pathlib import Path

from penpal.hazmat.hazmat import get_random_bytes
from penpal.settings import MAX_BLOCK_SIZE
from penpal.utils.file_helpers import assert_secure_dir


def create_pad(path: Path):
    """Creates a pad at `path`

    Arguments:
    path -- path to folder which will hold pad
    """
    pass


def create_block_file(path: Path, size: int):
    """Creates a block file suitable for use as a one-time pad.
    The block file's data will be generated by the operating system's
    pseudorandom number generator via `os.urandom`.

    Arguments:
    path -- `Path` object that references an existing directory
            where block file should be created (e.g. /home/alice/pads/my.pad/blocks)
    size -- size of block file in bytes (must be less than `MAX_BLOCK_SIZE`)
    """
    assert_secure_dir(path)

    if size > MAX_BLOCK_SIZE:
        raise ValueError((f"Cannot create blocks larger than {MAX_BLOCK_SIZE} bytes. " +
                          f"Received request for {size} bytes."))

    data = get_random_bytes(size)

    # use sha3-256 digest of block for filename
    sha = sha3_256(data, usedforsecurity=True).hexdigest()
    block_file = path.joinpath(sha)

    # create block file
    with open(block_file, "wb") as f:
        f.write(data)

    return sha
